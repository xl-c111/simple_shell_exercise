#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main(void)
{
    pid_t child_pid;
    int status;

    // Execute the command 5 times in 5 different children
    for (int i = 0; i < 5; i++)
    {
        child_pid = fork();

        if (child_pid == -1)
        {
            perror("fork failed");
            exit(EXIT_FAILURE);
        }

        if (child_pid == 0)
        {
            // Child process
            char *argv[] = {"/bin/ls", "-l", "/tmp", NULL};

            // execve replaces the current process with /bin/ls
            if (execve(argv[0], argv, NULL) == -1)
            {
                perror("execve failed");
                exit(EXIT_FAILURE);  // child should exit if exec fails
            }
        }
        else
        {
            // Parent process waits for child to finish before next iteration
            wait(&status);
        }
    }

    return 0;
}

